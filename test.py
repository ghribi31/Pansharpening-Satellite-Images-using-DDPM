# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FRghA-D1q8ChAIE18qV2MHUQnVgnTfO8
"""

import torch
from diffusion import GaussianDiffusion
from unet import UNet
from dataset import get_data_loader

def test(model, data_loader, device):
    model.eval()
    with torch.no_grad():
        for lr_image, hr_image in data_loader:
            lr_image, hr_image = lr_image.to(device), hr_image.to(device)
            condition = torch.cat([lr_image, hr_image], dim=1)
            output = model(hr_image, condition)
            print(f"Generated image shape: {output.shape}")

if __name__ == "__main__":
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    unet = UNet(in_channel=6, out_channel=3).to(device)
    diffusion_model = GaussianDiffusion(unet, image_size=128, channels=3, loss_type='l1', conditional=True, schedule_opt={"schedule": "linear", "n_timestep": 1000, "linear_start": 1e-4, "linear_end": 2e-2}).to(device)

    lr_dir = "D:/download/StageRecherche/lr_sentinel-1_014"
    hr_dir = "D:/download/StageRecherche/hr_venus_21"
    data_loader = get_data_loader(lr_dir, hr_dir, batch_size=16)

    test(diffusion_model, data_loader, device)